name: Test and make release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '*.rst'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.rst'
      - '*.md'

env:
  POETRY_VIRTUALENVS_CREATE: true
  POETRY_VIRTUALENVS_IN_PROJECT: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.10', '3.9', '3.8']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v8
      - name: Get full python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-test-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install --no-root
      - name: Complete CI/CD setup
        run: poetry run inv setup-cicd-test-stage
      - name: Run unit tests
        run: poetry run inv test

  bdd:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.10', '3.9', '3.8']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v8
      - name: Get full python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-bdd-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
      - name: Complete CI/CD setup
        run: poetry run inv setup-cicd-test-stage
      - name: Run unit tests
        run: poetry run inv bdd

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v8
      - name: Get full python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-format-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install --no-root
      - name: Complete CI/CD setup
        run: poetry run inv setup-cicd-test-stage
      - name: Run format checks
        run: poetry run inv format-check

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v8
      - name: Get full python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-lint-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install --no-root
      - name: Complete CI/CD setup
        run: poetry run inv setup-cicd-test-stage
      - name: Run lint checks
        run: poetry run inv lint

#  type:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Python 3.10
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
#      - name: Install tools (Poetry)
#        uses: Gr1N/setup-poetry@v8
#      - name: Get full python version
#        id: full-python-version
#        shell: bash
#        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
#      - name: Set up cache
#        uses: actions/cache@v3
#        id: cache
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-type-${{ hashFiles('**/poetry.lock') }}
#      - name: Install dependencies
#        run: poetry install --no-root
#      - name: Complete CI/CD setup
#        run: poetry run inv setup-cicd-test-stage
#      - name: Run type checks
#        run: poetry run inv type

  semantic_release:
    needs:
      - test
      - bdd
      - format
      - lint
#      - type
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 12.x
        uses: actions/setup-node@v3
        with:
          node-version: 12.x
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('.releaserc') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v8
      - name: Complete CI/CD setup
        run: make setup-cicd-release-stage
      - name: Get full python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-release-${{ hashFiles('**/poetry.lock') }}
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3.0.0
        with:
          semantic_version: 17.0.4
          extra_plugins: |
            @semantic-release/changelog@"^5.0.1"
            @semantic-release/exec@"^5.0.0"
            @semantic-release/git@"^9.0.0"
            @semantic-release/github@"^7.0.5"
        env:
          GITHUB_TOKEN: ${{ secrets.SELF_SET_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GIT_COMMITTER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
