name: Test and make release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  POETRY_VIRTUALENVS_CREATE: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.7, 3.6]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v2
      - name: Install remaining CI/CD tools and dependencies
        run: make setup-cicd-test-stage-github
      - name: Install dependencies
        run: make deps-test
      - name: Run unit tests
        run: make test

  bdd:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.7, 3.6]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v2
      - name: Install remaining CI/CD tools and dependencies
        run: make setup-cicd-test-stage-github
      - name: Install dependencies
        run: make deps-bdd
      - name: Run unit tests
        run: make bdd

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v2
      - name: Install remaining CI/CD tools and dependencies
        run: make setup-cicd-test-stage-github
      - name: Install dependencies
        run: make deps-format
      - name: Run format checks
        run: make format-check

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v2
      - name: Install remaining CI/CD tools and dependencies
        run: make setup-cicd-test-stage-github
      - name: Install dependencies
        run: make deps-lint
      - name: Run lint checks
        run: make lint

  type:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v2
      - name: Install remaining CI/CD tools and dependencies
        run: make setup-cicd-test-stage-github
      - name: Install dependencies
        run: make deps-type
      - name: Run type checks
        run: make type

  semantic_release:
    needs:
      - test
      - bdd
      - format
      - lint
      - type
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install tools (Poetry)
        uses: Gr1N/setup-poetry@v2
#      - name: Install tools (Release tools)
#        run: make setup-release-tools-github
#      - name: Make release
#        run: make cicd-release
# alternative using a github action
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 17.0.4
          extra_plugins: |
            @semantic-release/changelog@"^5.0.1"
            @semantic-release/exec@"^5.0.0"
            @semantic-release/git@"^9.0.0"
            @semantic-release/github@"^7.0.5"
        env:
          GITHUB_TOKEN: ${{ secrets.SELF_SET_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.GIT_COMMITTER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
